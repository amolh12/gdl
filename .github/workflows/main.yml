name: build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

# Tip: Use this action to debug with SSH.
#      - name: Setup upterm session
#        uses: lhotari/action-upterm@v1
 
jobs:
  prelude:
    runs-on: ubuntu-latest
    outputs:
      matrix-windows: ${{ steps.set-matrix-windows.outputs.matrix-windows }}
      matrix-others: ${{ steps.set-matrix-others.outputs.matrix-others }}
    steps:
    - name: Create Build Matrix (Windows)
      id: set-matrix-windows
      run: |
        if [[ '${{ github.ref }}' == *pull* ]]; then 
            matrix="{deps: ['full'], arch: ['x86_64'], configuration: ['Release']}"
        else
            matrix="{deps: ['full-msmpi', 'full', 'mini'], arch: ['x86_64', 'i686'], configuration: ['Release', 'Debug']}"
        fi
        echo "::set-output name=matrix-windows::$matrix"
    - name: Create Build Matrix (Linux/macOS)
      id: set-matrix-others
      run: |
        if [[ '${{ github.ref }}' == *pull* ]]; then 
            matrix="{os: ['ubuntu-latest', 'macos-latest'], deps: ['full'], configuration: ['Release']}"
        else
            matrix="{os: ['ubuntu-latest', 'macos-latest'], deps: ['full', 'mini'], configuration: ['Release', 'Debug']}"
        fi
        echo "::set-output name=matrix-others::$matrix"
  build-linux-macos:
    runs-on: ${{ matrix.os }}
    needs: prelude
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prelude.outputs.matrix-others) }}
    env:
      DEPS: ${{ matrix.deps }}
      Configuration: ${{ matrix.configuration }}
      ROOT_DIR: ${{ github.workspace }}/..
    steps:
      - name: Checkout GDL
        uses: actions/checkout@v2
      - name: Cache Dependencies (macOS, Homebrew)
        if: matrix.os == 'macos-latest'
        id: cache-macos
        uses: actions/cache@v2
        with:
          path: /usr/local
          key: msys2-packages-${{ matrix.os }}
      - name: Cache Dependencies (Linux, Apt)
        if: matrix.os == 'ubuntu-latest'
        id: cache-ubuntu
        uses: actions/cache@v2
        with:
          path: |
            /usr/lib
            /usr/include
            /usr/share
          key: msys2-packages-${{ matrix.os }}
      - name: Install Dependencies
        if: (matrix.os == 'macos-latest'  && steps.cache-macos.outputs.cache-hit != 'true') || \
            (matrix.os == 'ubuntu-latest' && steps.cache-ubuntu.outputs.cache-hit != 'true')
        run: |
          .ci/build_gdl.sh prep
      - name: Build GDL
        run: |
          .ci/build_gdl.sh build
      - name: Test GDL
        run: |
          .ci/build_gdl.sh check || exit 0
  build-windows:
    runs-on: windows-latest
    needs: prelude
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prelude.outputs.matrix-windows) }}
    env:
      DEPS: ${{ matrix.deps }}
      WORKSPACE: ${{ github.workspace }}
      Platform: ${{ matrix.arch }}
      Configuration: ${{ matrix.configuration }}
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: false
          release: false
          install: >-
            mingw-w64-${{ matrix.arch }}-toolchain
            mingw-w64-${{ matrix.arch }}-cmake
            mingw-w64-${{ matrix.arch }}-nsis
            zip
            unzip
            tar
            zstd
            make
            git
      - name: Checkout GDL
        uses: actions/checkout@v2
      - name: Cache Dependencies (Windows, MSYS, 64bit)
        if: matrix.arch == x86_64
        id: cache-64
        uses: actions/cache@v2
        with:
          path: |
            C:\msys64\mingw64
          key: msys2-packages-${{ matrix.arch }}
      - name: Cache Dependencies (Windows, MSYS, 32bit)
        if: matrix.arch == i686
        id: cache-32
        uses: actions/cache@v2
        with:
          path: |
            C:\msys64\mingw32
          key: msys2-packages-${{ matrix.arch }}
      - name: Check Version of Latest GDL Workbench
        if: matrix.arch == 'x86_64'
        id: gdl_workbench
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: gnudatalanguage/gdlde
      - name: Install MSMPI
        if: matrix.deps == 'full-msmpi'
        run: |
          Invoke-WebRequest -Uri https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe -OutFile MSMpiSetup.exe
          .\MSMpiSetup.exe -unattend
      - name: Install Dependencies
        if: (matrix.arch == 'x86_64' && steps.cache-64.outputs.cache-hit != 'true') || \
            (matrix.arch == 'i686'   && steps.cache-32.outputs.cache-hit != 'true')
        shell: msys2 {0}
        run: |
          export ROOT_DIR=`cygpath ${WORKSPACE}`/..
          .ci/build_gdl.sh prep
      - name: Build GDL
        shell: msys2 {0}
        run: |
          export ROOT_DIR=`cygpath ${WORKSPACE}`/..
          .ci/build_gdl.sh build
      - name: Package GDL
        shell: msys2 {0}  
        run: |
          export ROOT_DIR=`cygpath ${WORKSPACE}`/..
          export GDLDE_VERSION=${{ steps.gdl_workbench.outputs.release }}
          .ci/build_gdl.sh pack
          .ci/build_gdl.sh prep_deploy
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2.2.1
        with:
          name: GDL Installer (${{ matrix.deps }}, ${{ matrix.arch }}, ${{ matrix.configuration }})
          path: gdlsetup-${{ matrix.arch }}-${{ matrix.deps }}.exe
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2.2.1
        with:
          name: GDL (${{ matrix.deps }}, ${{ matrix.arch }}, ${{ matrix.configuration }})
          path: gdl-${{ matrix.arch }}-${{ matrix.deps }}.zip
      - name: Test GDL
        shell: msys2 {0}
        run: |
          export ROOT_DIR=`cygpath ${WORKSPACE}`/..
          .ci/build_gdl.sh check || exit 0
